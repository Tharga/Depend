name: 0.0.$(Rev:r)

stages:
  - stage: Build
    displayName: 'Build and Pack'
    jobs:
      - job: BuildJob
        displayName: 'Build & Test'
        pool:
          vmImage: 'windows-latest'

        variables:
          buildConfiguration: 'Release'
          runtime: 'win-x64'
          outputDir: '$(Build.ArtifactStagingDirectory)/output'
          chocoDir: '$(Build.ArtifactStagingDirectory)/choco'
          projectPath: 'Tharga.Depend/Tharga.Depend.csproj'
          nuspecPath: 'Resources/choco/depend.nuspec'
          exeName: 'depend.exe'

        steps:
          # - task: UseDotNet@2
          #   displayName: 'Use .NET 9'
          #   inputs:
          #     version: 9.0.x
          #     includePreviewVersions: false

          - task: NuGetToolInstaller@1

          - task: DotNetCoreCLI@2
            displayName: 'Restore'
            inputs:
              command: 'restore'
              projects: '**/*.csproj'

          - task: DotNetCoreCLI@2
            displayName: 'Build'
            inputs:
              command: 'build'
              projects: '**/*.csproj'
              arguments: '--configuration $(buildConfiguration)'

          - task: DotNetCoreCLI@2
            displayName: 'Test'
            inputs:
              command: 'test'
              projects: 'Tharga.Depend.Tests/Tharga.Depend.Tests.csproj'
              arguments: '--configuration $(buildConfiguration)'

          - task: DotNetCoreCLI@2
            displayName: 'Publish EXE'
            inputs:
              command: 'publish'
              publishWebProjects: false
              projects: '$(projectPath)'
              arguments: >
                --configuration $(buildConfiguration)
                --runtime $(runtime)
                --self-contained true
                /p:PublishSingleFile=true
                /p:PublishTrimmed=true
                --output $(outputDir)
              zipAfterPublish: false

          - task: PowerShell@2
            displayName: 'Prepare LICENSE and VERIFICATION for Chocolatey'
            inputs:
              targetType: 'inline'
              script: |
                $chocoPath = "$(Build.SourcesDirectory)/Resources/choco"
                $licenseSource = "$(Build.SourcesDirectory)/LICENSE"
                $licenseTarget = Join-Path $chocoPath "LICENSE.txt"
                $verificationSource = Join-Path $chocoPath "VERIFICATION"
                $verificationTarget = Join-Path $chocoPath "VERIFICATION.txt"

                Write-Host "Preparing license and verification files for Chocolatey packaging..."

                if (Test-Path $licenseSource) {
                  Copy-Item $licenseSource -Destination $licenseTarget -Force
                  Write-Host "Copied LICENSE -> LICENSE.txt"
                } else {
                  Write-Warning "LICENSE file not found at $licenseSource"
                }

                if (Test-Path $verificationSource) {
                  Copy-Item $verificationSource -Destination $verificationTarget -Force
                  Write-Host "Copied VERIFICATION -> VERIFICATION.txt"
                } else {
                  Write-Warning "VERIFICATION file not found at $verificationSource"
                }

          - task: PowerShell@2
            displayName: 'Create Chocolatey Package'
            inputs:
              targetType: 'inline'
              script: |
                choco install chocolatey --no-progress -y

                $exe = Get-ChildItem "$(outputDir)" -Filter *.exe -Recurse | Where-Object { $_.Name -ieq "depend.exe" } | Select-Object -First 1
                if (-not $exe) {
                  Write-Host "Looking for EXE in: $(outputDir)"
                  Get-ChildItem "$(outputDir)" -Recurse
                  throw "EXE not found in output directory: $(outputDir)"
                }

                $temp = "$(Build.ArtifactStagingDirectory)/choco-temp"
                $tools = "$temp/tools"
                New-Item -ItemType Directory -Path $tools -Force | Out-Null

                Copy-Item $exe.FullName -Destination $tools

                Copy-Item "$(nuspecPath)" "$temp/depend.nuspec"

                Push-Location $temp
                choco pack depend.nuspec --version "$(Build.BuildNumber)" --out "$(chocoDir)"
                Pop-Location

          - task: PowerShell@2
            displayName: 'Clean up temporary LICENSE/VERIFICATION files'
            inputs:
              targetType: 'inline'
              script: |
                Remove-Item "$(Build.SourcesDirectory)/Resources/choco/LICENSE.txt" -ErrorAction SilentlyContinue
                Remove-Item "$(Build.SourcesDirectory)/Resources/choco/VERIFICATION.txt" -ErrorAction SilentlyContinue

          - task: PublishBuildArtifacts@1
            displayName: 'Publish Artifacts'
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'drop'
              publishLocation: 'Container'

  - stage: Release
    displayName: 'Release to Chocolatey and GitHub'
    dependsOn: Build
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    jobs:
      - job: ReleaseJob
        displayName: 'Push Chocolatey Package and Create GitHub Release'
        pool:
          vmImage: 'windows-latest'

        steps:
          - task: DownloadBuildArtifacts@0
            displayName: 'Download Artifact from Build'
            inputs:
              buildType: 'current'
              artifactName: 'drop'
              downloadPath: '$(System.ArtifactsDirectory)'

          # Push to Chocolatey
          - task: PowerShell@2
            displayName: 'Push .nupkg to Chocolatey'
            inputs:
              targetType: 'inline'
              script: |
                choco install chocolatey --no-progress -y
                $pkg = Get-ChildItem "$(System.ArtifactsDirectory)/drop/choco/*.nupkg" | Select-Object -First 1
                if (-not $pkg) {
                  throw "No .nupkg file found."
                }
                choco push $pkg.FullName --source https://push.chocolatey.org/ --api-key "$(CHOCOLATEY_API_KEY)"

          # Create a GitHub release
          - task: GitHubRelease@1
            displayName: 'Create GitHub Release'
            inputs:
              gitHubConnection: 'GitHubServiceConnection' # set up in Project Settings --> Service connections
              repositoryName: 'Tharga/Depend'
              tagSource: 'manual'
              tag: 'v$(Build.BuildNumber)'
              title: 'Release $(Build.BuildNumber)'
              assets: '$(System.ArtifactsDirectory)/drop/choco/*.nupkg'
              isDraft: false
              isPreRelease: false
              addChangeLog: true

          # Create a version tag in the GitHub repo
          - task: PowerShell@2
            displayName: 'Tag GitHub Repository'
            inputs:
              targetType: 'inline'
              script: |
                $version = "$(Build.BuildNumber)"
                $tag = "$version"

                Write-Host "Creating git tag $tag"

                git config user.email "builds@azuredevops.com"
                git config user.name "Azure DevOps Pipeline"

                git tag -a $tag -m "Release $version"
                git push origin $tag