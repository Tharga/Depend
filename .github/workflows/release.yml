name: Build, Test, and Release

on:
  # Run build + test automatically for PRs and commits
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

  # Allow manual release trigger from GitHub UI
  workflow_dispatch:

env:
  DOTNET_VERSION: '9.0.x'
  BUILD_CONFIG: 'Release'
  RUNTIME: 'win-x64'
  PROJECT_PATH: 'Tharga.Depend/Tharga.Depend.csproj'
  OUTPUT_DIR: '${{ github.workspace }}/output'
  CHOCO_DIR: '${{ github.workspace }}/choco'
  CHOCO_TEMP: '${{ github.workspace }}/choco-temp'
  NUSPEC_PATH: 'Resources/choco/depend.nuspec'
  EXE_NAME: 'depend.exe'

permissions:
  contents: write    # Required for tagging and release creation
  packages: write

jobs:
  ci:
    name: Build & Test
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Build project
        run: dotnet build --configuration ${{ env.BUILD_CONFIG }}

      - name: Run tests
        run: dotnet test Tharga.Depend.Tests/Tharga.Depend.Tests.csproj --configuration ${{ env.BUILD_CONFIG }}

  release:
    name: Manual Release (Chocolatey + GitHub)
    runs-on: windows-latest
    needs: ci   # ensure build/test succeeded first
    if: github.event_name == 'workflow_dispatch'   # manual only

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # required for git tagging

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Build
        run: dotnet build --configuration ${{ env.BUILD_CONFIG }}

      - name: Publish EXE
        run: |
          dotnet publish ${{ env.PROJECT_PATH }} `
            --configuration ${{ env.BUILD_CONFIG }} `
            --runtime ${{ env.RUNTIME }} `
            --self-contained true `
            /p:PublishSingleFile=true `
            /p:PublishTrimmed=true `
            --output "${{ env.OUTPUT_DIR }}"

      - name: Prepare LICENSE and VERIFICATION for Chocolatey
        shell: pwsh
        run: |
          $chocoPath = "Resources/choco"
          $licenseSource = "LICENSE"
          $licenseTarget = Join-Path $chocoPath "LICENSE.txt"
          $verificationSource = Join-Path $chocoPath "VERIFICATION"
          $verificationTarget = Join-Path $chocoPath "VERIFICATION.txt"

          Write-Host "Preparing LICENSE and VERIFICATION for Chocolatey packaging..."
          if (Test-Path $licenseSource) {
            Copy-Item $licenseSource -Destination $licenseTarget -Force
          }
          if (Test-Path $verificationSource) {
            Copy-Item $verificationSource -Destination $verificationTarget -Force
          }

      - name: Create Chocolatey Package
        shell: pwsh
        run: |
          choco install chocolatey --no-progress -y

          $exe = Get-ChildItem "${{ env.OUTPUT_DIR }}" -Filter *.exe -Recurse | Where-Object { $_.Name -ieq "${{ env.EXE_NAME }}" } | Select-Object -First 1
          if (-not $exe) {
            Write-Host "Looking for EXE in: ${{ env.OUTPUT_DIR }}"
            Get-ChildItem "${{ env.OUTPUT_DIR }}" -Recurse
            throw "EXE not found"
          }

          $temp = "${{ env.CHOCO_TEMP }}"
          $tools = "$temp/tools"
          New-Item -ItemType Directory -Path $tools -Force | Out-Null
          Copy-Item $exe.FullName -Destination $tools
          Copy-Item "${{ env.NUSPEC_PATH }}" "$temp/depend.nuspec"

          Push-Location $temp
          choco pack depend.nuspec --version "${{ github.run_number }}" --out "${{ env.CHOCO_DIR }}"
          Pop-Location

      - name: Push to Chocolatey
        shell: pwsh
        env:
          CHOCOLATEY_API_KEY: ${{ secrets.CHOCOLATEY_API_KEY }}
        run: |
          choco install chocolatey --no-progress -y
          $pkg = Get-ChildItem "${{ env.CHOCO_DIR }}" -Filter *.nupkg | Select-Object -First 1
          if (-not $pkg) {
            throw "No .nupkg file found in $env:CHOCO_DIR"
          }
          Write-Host "Pushing package $($pkg.Name) to Chocolatey..."
          choco push $pkg.FullName --source https://push.chocolatey.org/ --api-key $env:CHOCOLATEY_API_KEY

      - name: Tag Git Repository
        shell: pwsh
        run: |
          $version = "v${{ github.run_number }}"
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git tag -a $version -m "Release $version"
          git push origin $version

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.run_number }}
          name: "Release v${{ github.run_number }}"
          body: |
            ## What's Changed
            - Automated release created manually via GitHub Actions.
          files: |
            ${{ env.CHOCO_DIR }}/*.nupkg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
