name: Build, Test, and Release

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

env:
  BASE_VERSION: '0.1'          # Base version for auto-increment (e.g., 0.1 -> 0.1.1, 0.1.2, etc.)
  DOTNET_VERSION: '9.0.x'
  BUILD_CONFIG: 'Release'
  RUNTIME: 'win-x64'
  PROJECT_PATH: 'Tharga.Depend/Tharga.Depend.csproj'
  OUTPUT_DIR: '${{ github.workspace }}/output'
  CHOCO_DIR: '${{ github.workspace }}/choco'
  CHOCO_TEMP: '${{ github.workspace }}/choco-temp'
  NUSPEC_PATH: 'Resources/choco/depend.nuspec'
  EXE_NAME: 'depend.exe'

permissions:
  contents: write
  packages: write

jobs:
  ci:
    name: Build and Test
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Build project
        run: |
          echo "Building version ${{ env.VERSION }}"
          dotnet build ${{ env.PROJECT_PATH }} `
            --configuration ${{ env.BUILD_CONFIG }} `
            /p:Version=${{ env.VERSION }} `
            /p:AssemblyVersion=${{ env.VERSION }} `
            /p:FileVersion=${{ env.VERSION }} `
            /p:InformationalVersion=${{ env.VERSION }}

      - name: Run tests
        run: dotnet test Tharga.Depend.Tests/Tharga.Depend.Tests.csproj --configuration ${{ env.BUILD_CONFIG }}

  release:
    name: Manual Release (Auto Incremented Version)
    runs-on: windows-latest
    needs: ci
    if: github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout full repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed to access all git tags

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Determine Next Version
        id: version
        shell: pwsh
        run: |
          $base = "${{ env.BASE_VERSION }}"
          $pattern = "^v$base\."
          $tags = git tag --list | Where-Object { $_ -match $pattern }

          if ($tags.Count -eq 0) {
            $next = "$base.1"
          } else {
            $latest = ($tags | Sort-Object { [version]($_ -replace '^v', '') } | Select-Object -Last 1)
            $parts = $latest -replace '^v', '' -split '\.'
            $major,$minor,$patch = $parts
            $nextPatch = [int]$patch + 1
            $next = "$major.$minor.$nextPatch"
          }

          Write-Host "Next version: $next"
          "VERSION=$next" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "version=$next" >> $env:GITHUB_OUTPUT

      - name: Display Version Summary
        run: |
          echo "### Release version: v${{ steps.version.outputs.version }}" >> $env:GITHUB_STEP_SUMMARY

      - name: Build
        run: dotnet build --configuration ${{ env.BUILD_CONFIG }}

      - name: Publish EXE
        run: |
          echo "Publishing version ${{ env.VERSION }}"
          dotnet publish ${{ env.PROJECT_PATH }} `
            --configuration ${{ env.BUILD_CONFIG }} `
            --runtime ${{ env.RUNTIME }} `
            --self-contained true `
            /p:PublishSingleFile=true `
            /p:PublishTrimmed=true `
            /p:Version=${{ env.VERSION }} `
            /p:AssemblyVersion=${{ env.VERSION }} `
            /p:FileVersion=${{ env.VERSION }} `
            /p:InformationalVersion=${{ env.VERSION }} `
            --output "${{ env.OUTPUT_DIR }}"

      - name: Prepare LICENSE and VERIFICATION for Chocolatey
        shell: pwsh
        run: |
          $chocoPath = "Resources/choco"
          $licenseSource = "LICENSE"
          $licenseTarget = Join-Path $chocoPath "LICENSE.txt"
          $verificationSource = Join-Path $chocoPath "VERIFICATION"
          $verificationTarget = Join-Path $chocoPath "VERIFICATION.txt"

          Write-Host "Preparing LICENSE and VERIFICATION for Chocolatey packaging..."
          if (Test-Path $licenseSource) {
            Copy-Item $licenseSource -Destination $licenseTarget -Force
          }
          if (Test-Path $verificationSource) {
            Copy-Item $verificationSource -Destination $verificationTarget -Force
          }

      - name: Create Chocolatey Package
        shell: pwsh
        run: |
          choco install chocolatey --no-progress -y

          $exe = Get-ChildItem "${{ env.OUTPUT_DIR }}" -Filter *.exe -Recurse | Where-Object { $_.Name -ieq "${{ env.EXE_NAME }}" } | Select-Object -First 1
          if (-not $exe) {
            throw "EXE not found"
          }

          $temp = "${{ env.CHOCO_TEMP }}"
          $tools = "$temp/tools"
          New-Item -ItemType Directory -Path $tools -Force | Out-Null
          Copy-Item $exe.FullName -Destination $tools
          Copy-Item "${{ env.NUSPEC_PATH }}" "$temp/depend.nuspec"

          Push-Location $temp
          choco pack depend.nuspec --version "${{ env.VERSION }}" --out "${{ env.CHOCO_DIR }}"
          Pop-Location

      - name: Push to Chocolatey
        shell: pwsh
        env:
          CHOCOLATEY_API_KEY: ${{ secrets.CHOCOLATEY_API_KEY }}
        run: |
          choco install chocolatey --no-progress -y
          $pkg = Get-ChildItem "${{ env.CHOCO_DIR }}" -Filter *.nupkg | Select-Object -First 1
          if (-not $pkg) { throw "No .nupkg found" }
          Write-Host "Pushing package $($pkg.Name) to Chocolatey..."
          choco push $pkg.FullName --source https://push.chocolatey.org/ --api-key $env:CHOCOLATEY_API_KEY

      - name: Tag Git Repository
        shell: pwsh
        run: |
          $tag = "v${{ env.VERSION }}"
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git tag -a $tag -m "Release $tag"
          git push origin $tag

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.VERSION }}
          name: "Release v${{ env.VERSION }}"
          generate_release_notes: true
          files: |
            ${{ env.CHOCO_DIR }}/*.nupkg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
